            slow = slow.next
        while fast.next and fast.next.next:
    def getMid(self, head):
        slow, fast = head, head
        return self.merge(left, right)
    
        if not head or not head.next: return head
        mid = self.getMid(head)
        left = self.sortList(head)
        right = self.sortList(mid)
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head):
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
