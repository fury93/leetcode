                    subset = EDS(p)
                    if len(maxSubset) < len(subset):
                        maxSubset = subset
            
            # extend the found max subset with the current tail.
            maxSubset = maxSubset.copy()
            maxSubset.append(tail)
            
                if tail % nums[p] == 0:
            for p in range(0, i):
            # The value of EDS(i) depends on it previous elements
            tail = nums[i]
            maxSubset = []
            
            if i in memo:
                return memo[i]
        def EDS(i):
            """ recursion with memoization """
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        
class Solution:
[
